var currentName = "VISOS";var gSwitchToSL = false;function myAlert(message){    }function Default() {                            document.getElementById("theta12").value = "0.310";    document.getElementById("theta23").value = "0.558";    document.getElementById("theta13").value = "0.02241";    document.getElementById("dm^2_21").value = "7.39e-5";    document.getElementById("dm^2_32").value = "2.449e-3";    document.getElementById("cp").value = "222";}function Bimaximal() {    document.getElementById("theta12").value = "0.5";    document.getElementById("theta23").value = "0.5";    document.getElementById("theta13").value = "0";    document.getElementById("dm^2_21").value = "7.37e-5";    document.getElementById("dm^2_32").value = "2.56e-3";    document.getElementById("cp").value = "0";}function Tribimaximal() {    document.getElementById("theta12").value = "0.333333";    document.getElementById("theta23").value = "0.5";    document.getElementById("theta13").value = "0";    document.getElementById("dm^2_21").value = "7.37e-5";    document.getElementById("dm^2_32").value = "2.56e-3";    document.getElementById("cp").value = "0";}function Trimaximal() {    document.getElementById("theta12").value = "0.5";    document.getElementById("theta23").value = "0.5";    document.getElementById("theta13").value = "0.333333";    document.getElementById("dm^2_21").value = "7.37e-5";    document.getElementById("dm^2_32").value = "2.56e-3";    document.getElementById("cp").value = "90";}function Clear() {        document.getElementById("theta12").value = "";    document.getElementById("theta23").value = "";    document.getElementById("theta13").value = "";    document.getElementById("dm^2_21").value = "";    document.getElementById("dm^2_32").value = "";    document.getElementById("cp").value = "";        document.getElementById("neutrino").value = "";    document.getElementById("energy").value = "";    document.getElementById("distance").value = "";    document.getElementById("density").value = "";}function KamLAND() {    document.getElementById("energy").value = "0.003";    document.getElementById("distance").value = "170";    document.getElementById("neutrino").value = "-1";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "KamLAND";}function JUNO() {    document.getElementById("energy").value = "0.003";    document.getElementById("distance").value = "53";    document.getElementById("neutrino").value = "-1";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "JUNO";}function DayaBay() {    document.getElementById("energy").value = "0.003";    document.getElementById("distance").value = "1.9";    document.getElementById("neutrino").value = "-1";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "Daya Bay";}function T2K() {    document.getElementById("energy").value = "0.6";    document.getElementById("distance").value = "295";    document.getElementById("neutrino").value = "2";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "T2K";}function HKK() {    document.getElementById("energy").value = "0.75";    document.getElementById("distance").value = "1100";    document.getElementById("neutrino").value = "2";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "HKK";}function NOvA() {    document.getElementById("energy").value = "2";    document.getElementById("distance").value = "810";    document.getElementById("neutrino").value = "2";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "NOvA";}function DUNE() {    document.getElementById("energy").value = "2.4";    document.getElementById("distance").value = "1284.9";    document.getElementById("neutrino").value = "2";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "DUNE (1. OM)";}function DUNELE() {    document.getElementById("energy").value = "0.8";    document.getElementById("distance").value = "1284.9";    document.getElementById("neutrino").value = "2";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "DUNE (2. OM)";}function nuSTORM() {    document.getElementById("energy").value = "3.5";    document.getElementById("distance").value = "2500";    document.getElementById("neutrino").value = "1";    document.getElementById("density").value = "2.6";    document.getElementById("title").value = "nuSTORM";}function saveSVG(){        var svg1 = document.querySelector("svg");        var svgData = new XMLSerializer().serializeToString(svg1);        var svgSize = svg1.getBoundingClientRect();        var aa = document.createElement("a");    aa.download = currentName+".svg";    aa.href = "data:image/svg+xml;charset=utf8," +   encodeURIComponent(svgData);    document.body.appendChild(aa);    aa.click();    aa.remove();}function savePNG(){        var svg1 = document.querySelector("svg");        var svgData = new XMLSerializer().serializeToString(svg1);    var canvas = document.createElement("canvas");    var svgSize = svg1.getBoundingClientRect();    canvas.width = svgSize.width * 3;    canvas.height = svgSize.height * 3;    canvas.style.width = svgSize.width;    canvas.style.height = svgSize.height;    var ctx = canvas.getContext("2d");    ctx.scale(3, 3);            var img = document.createElement("img");        img.setAttribute("src", "data:image/svg+xml;charset=utf8," +   encodeURIComponent(svgData));        img.onload = function() {		ctx.drawImage(img, 0, 0);	var canvasdata = canvas.toDataURL("image/png", 1);        		var aa = document.createElement("a");	aa.download = currentName+".png";	aa.href = canvasdata;	document.body.appendChild(aa);	aa.click();	aa.remove();            };    }function saveGIF(){        aa=document.getElementById("downloadGIF");    aa.click();    }function Load(){    var XlegendOffset= 20;    var XpositionOffset = 10;    var YdomainOffset = 0.1;    var YpositionOffset = 40;            Clear();        var legendInfo=[];        var running;    var frames=[];     var timeCorrections=[];    function createLine(lineData){              currentName = lineData[7];						        var neutrinoHierarchy;	if(lineData[4] >= 0)	{	    neutrinoHierarchy="NH";	}else{	    neutrinoHierarchy="IH";	}	legendInfo.push([lineData[7], lineData[8], neutrinoType(lineData[6]), lineData[5], neutrinoHierarchy, lineData[9]]);        	if (gColorCounter <  colSize) {gColorCounter=gColorCounter+1;}	if (gColorCounter >= colSize ) {gColorCounter=0;}	gLineCounter=gLineCounter+1;	smallLegend();		var ptr = Module._Propagate(lineData[0], lineData[1], lineData[2], lineData[3], lineData[4],lineData[5]*((Math.PI)/180),			            lineData[8], lineData[9], Number(lineData[6]),lineData[10]);        	var X = [];	var Y = [];        var physicalTime = [];        var displayTime = [];        var npoint = 44000;	for (istep = 0; istep <npoint; istep++) {	    X[istep]            = Module.HEAPF64[(ptr >> 3) + istep + npoint*0];	    Y[istep]            = Module.HEAPF64[(ptr >> 3) + istep + npoint*1];	    physicalTime[istep] = Module.HEAPF64[(ptr >> 3) + istep + npoint*2];	    displayTime[istep]  = Module.HEAPF64[(ptr >> 3) + istep + npoint*3];	}	Module._free_buf(ptr);                var tc = d3.scale.linear()            .domain(displayTime)            .range(physicalTime);                timeCorrections.push(tc);        var data;        if(gSwitchToSL==false){	    data = [ { x: X,		       y: Y }] ;        }        else{                        data = [ { x: displayTime,		       y: physicalTime}] ;        }	svg.datum(data);        	var data_lines = svg.selectAll(".line")	    .data(data.map(function(d) {return d3.zip(d.x, d.y);}))	    .enter().append("g")	    .attr("class", "line");        	var draw_line = d3.svg.line()	    .x(function(d) { return x_scale(d[0]); })	    .y(function(d) { return y_scale(d[1]); })	    .interpolate("cardinal");        	var neutrinotext = neutrinoType(lineData[6]);        		stmp=	    'sin²\u03D1(12):'+ lineData[0]+"; "+	    'sin²\u03D1(23):'+ lineData[1]+"; "+	    'sin²\u03D1(13):'+ lineData[2]+"; "+	    "<tspan x='3em' dy='1.5em'>"+	    '\u0394m²(21):'  + lineData[3]+" eV²; "+	    '\u0394m²(32):'  + lineData[4]+" eV²; "+	    '\u03B4CP:'      + lineData[5]+"&#176;; "+	    "<tspan x='3em' dy='1.5em'>"+	    neutrinotext+"; "+	    'E:'             + lineData[8]+" GeV; "+	    'L:'             + lineData[9]+" km; " +	    '\u03c1:'        + lineData[10]+" g/cm\u00B3";        	document.getElementById('Legenddiv').style.width = "850px";                        	svglegend.append("circle").attr("cx",20).attr("cy", YpositionOffset+yplace(gLineCounter-0.2/3)).attr("r", 5).style("fill", getColor(gColorCounter));	svglegend.append("text")	    .attr("x",40)	    .attr("y", YpositionOffset+yplace(gLineCounter))	    .html(stmp)	    .style("font-size", "15px")	    .attr("text-anchor", "left")	    .style("alignment-baseline", "middle");	d3.select("#Legenddiv").append("input").attr("type", "checkbox")	    .attr("align", "right")	    .style("position", "absolute")	    .style("top", YpositionOffset+(clicks*75+30)+"px")	    .style("left", "730px")	    .attr("checked", "true")	    .attr("class", "replay")	    .attr("value", "replay_"+clicks);                	clicks = clicks + 1;	if(clicks > 1  ){	    incHeight();	}	else{	    document.getElementById('Legenddiv').style.height = "125px";	}        		var path = svg.selectAll("#path")	    .data(data.map(function(d) {return d3.zip(d.x, d.y);}))	    .enter().append("path")	    .attr("class","line")            .attr("id", "replay_"+(clicks-1))            .style("stroke", getColor(gColorCounter))	    .style("fill", "none")	    .style('stroke-width','2px')	    .attr("d", function(d) {return draw_line(d);});    }        function clearDocument(){		document.getElementById("preview").innerHTML=""; 	d3.select("#generalLegend").remove();	d3.selectAll("path").remove();	iniAnimationLegend();		d3.select("#Legenddiv").html("");	svglegend = d3.select("#Legenddiv").append("svg").attr("id","svg2").style("width", "730px");	legendInfo=[];        timeCorrections=[];	gLineCounter=-1;	frames=[];	document.getElementById('saveGIF').disabled = true;	document.getElementById('Legenddiv').style.height = "0px";	document.getElementById('start').disabled = false;	clicks = 0;        document.getElementById("animationDuration").value = 1;    }        function replay (){        document.getElementById("Animationdiv").scrollIntoView();			document.getElementById("preview").innerHTML="";	document.getElementById('saveGIF').disabled = true;        	var array = [];	var checkboxes = document.querySelectorAll('input[class=replay]:checked');		for (var ibox = 0; ibox < checkboxes.length; ibox++) {	    array.push(checkboxes[ibox].value);	}	var boxes="#"+array.join(", #");                	path=d3.selectAll(boxes);	path.each(function(dd) { dd.totalLength = this.getTotalLength(); })	    .attr("stroke-dasharray", function(dd) { return dd.totalLength + " " + dd.totalLength; })	    .attr("stroke-dashoffset", function(dd) { return dd.totalLength; })	    .transition()            .duration(getDuration())	            	    .ease("linear")                                                	    .attr("stroke-dashoffset", 0)            .each("end", function(){setTimeout(function (){if(document.getElementById("makeGIF").checked==true){document.getElementById("renderGIF").disabled=false; } }, 0); });                timeAndDistance();	if(document.getElementById("makeGIF").checked==true)	{            myAlert(frames.length+" @ pre-drawFrame-0 "+100);	    clearDownloadLink();            frames=[];            drawFrame();                        /*            myAlert(frames.length+" @ post-drawFrame-0 "+200);	    var tmpT0 = d3.interval((tmpElapsed0) => {                myAlert(frames.length+" @ T0 "+800);		drawFrame();                myAlert(frames.length+" @ T0 "+900);	    }, getDelay());            myAlert(frames.length+" @ post-T0 "+300);            */	}        myAlert(frames.length+" @ end-of-replay "+9999);                                                                    }        function getDuration(){        return document.getElementById("animationDuration").value*1000;    }    function getDelay(){        var nframe = 100;        if(document.getElementById("makeGIF").checked==true){            nframe = document.getElementById("numberOfFrames").value;        }                return getDuration()/nframe;    }    function allMatch(jj){				if (jj==0)	    return true;	return legendInfo.every(val => val[jj] === legendInfo[0][jj]);            }        function smallLegend(){		var fields=["#titletext", "#energytext", "#typetext", "#cptext", "#hierarchytext"]; 		        var subs = "&#948;CP = ";	var variables=["","","",subs, ""];	var units=[""," GeV","","°", ""];	var generalLegend = d3.select("#generalLegend");		var line = generalLegend.append("line")        	    .attr("x1", XlegendOffset-45)	    .attr("y1", YpositionOffset+50+40*gLineCounter)	    .attr("x2", XlegendOffset-30)	    .attr("y2", YpositionOffset+50+40*gLineCounter)	    .style('stroke-width','15px')	    .style("stroke", getColor(gColorCounter));                var xkey2 = 40;	var energy = generalLegend.append("text")	            .attr("x", XlegendOffset+xkey2)	    .attr("dy", YpositionOffset+(55+40*gLineCounter))	    .attr("id","energytext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var cp = generalLegend.append("text")	            .attr("x", XlegendOffset+xkey2)	    .attr("dy", YpositionOffset+55+40*gLineCounter)	    .attr("id","cptext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var type = generalLegend.append("text")	            .attr("x", XlegendOffset-20)	    .attr("dy", YpositionOffset+55+40*gLineCounter)	    .attr("id","typetext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var distance = generalLegend.append("text")	    .attr("x", XlegendOffset-20)	    .attr("dy", YpositionOffset+(75+40*gLineCounter))	    .attr("id","distancetext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var time = generalLegend.append("text")	    .attr("x", XlegendOffset+110)	    .attr("dy", YpositionOffset+(75+40*gLineCounter))	    .attr("id","timetext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var hierarchy = generalLegend.append("text")	            .attr("x", XlegendOffset+xkey2)	    .attr("dy", YpositionOffset+(55+40*gLineCounter))	    .attr("id","hierarchytext"+gLineCounter)	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');                	for(var ii=0; ii<legendInfo[0].length-1; ii++) 	{	    if(allMatch(ii))		d3.select(fields[ii]).html(variables[ii]+legendInfo[legendInfo.length-1][ii]+units[ii]);	    	    else{		d3.select(fields[ii]).html("");		legendInfo.forEach((element, index) => { d3.select(fields[ii]+index).html(variables[ii]+legendInfo[index][ii]+units[ii]); } );			    }	}		            }        function getColor(idx) {        var usercol = document.getElementById("usercolor").value;        if( usercol!=-1){            return usercol;        }        else{            return color(idx);        }    }    function yplace(ii){    	return 20+ii*25*3 ;    }    function neutrinoType(ii){    	    	    	switch(ii){                	case "1":    	    return "νe";    	case "2":    	    return "νμ";    	case "3":    	    return "ντ";    	case "-1":    	    return "Anti-νe";    	case "-2":    	    return "Anti-νμ";    	case "-3":    	    return "Anti-ντ";                	default: return;                	}    }    function incHeight() {    	    	var Legenddivobject = document.getElementById("Legenddiv");    	var height = Legenddivobject.offsetHeight;    	var newHeight = height + 25*3;    	Legenddivobject.style.height = newHeight + 'px';    }        function timeAndDistance(){        var checkboxes = document.querySelectorAll('input[class=replay]');        var singleAnimation = (checkboxes.length==1);                                                var totdist = legendInfo[gLineCounter][legendInfo[gLineCounter].length-1];        var tottime = totdist/300;         var timeduration = getDuration();        var delay = getDelay();	        if(singleAnimation)	{            d3.select("#distancetext").html("Distance: 0 km");                                                                                                                      d3.select("#timetext").html("Time: 0 ms");  	    var tmpT1 = d3.interval((tmpElapsed1) => {                var displayT = tmpElapsed1/timeduration;                var physT = timeCorrections[gLineCounter](displayT);                var frac = Math.min(1, physT);                myAlert(frames.length+" @ T1-frac-"+frac+" "+10000);		d3.select("#distancetext").html("Distance: "+(totdist*frac).toFixed(1)+" km ("+(frac*100).toFixed(0)+"%)");		d3.select("#timetext").html("Time: "        +(tottime*frac).toFixed(3)+" ms");                drawFrame();		if (tmpElapsed1>timeduration) tmpT1.stop();	    }, delay); 	}else{            	    d3.select("#distancetext").html("");	    d3.select("#timetext").html("");            	    legendInfo.forEach((element, index) => {                 if(checkboxes[index].checked==true){                                        d3.select("#distancetext"+index).html("0 km (0%)"); 		                    }                else{                    var frac = 1;                    d3.select("#distancetext"+index).html((legendInfo[index][legendInfo[index].length-1]*frac).toFixed(1)+" km ("+(frac*100).toFixed(0)+"%)"); 		                    }	    } );	    	    var tmpT2 = d3.interval((tmpElapsed2) => {                                                var displayT = tmpElapsed2/timeduration;                		legendInfo.forEach((element, index) => {                     if(checkboxes[index].checked==true){                                            var physT = timeCorrections[index](displayT);                        var frac = Math.min(1, physT);                        d3.select("#distancetext"+index).html((legendInfo[index][legendInfo[index].length-1]*frac).toFixed(1)+" km ("+(frac*100).toFixed(0)+"%)"); 			                    }		} );                drawFrame();		if (tmpElapsed2 > timeduration) tmpT2.stop();                	    }, delay); 	}    }    function clearDownloadLink(){		var bb=document.getElementById("downloadGIF");	if (bb!=null)	{	    bb.remove();	}    }        function drawFrame(){        if(document.getElementById("makeGIF").checked==false){             return;        }        myAlert(frames.length+" @ drawFrame "+3000);		var svg1 = document.querySelector("svg");	var svgData = new XMLSerializer().serializeToString(svg1);	frames.push(svgData);        document.getElementById("numberOfGeneratedFrames").value=frames.length;        myAlert(frames.length+" @ drawFrame "+4000);    }        function runDiagnosticsonChange(){        alert("Running Diagnostics: "+document.getElementById("runDiagnostics").value+" (<blank> to get back to default)");        if(document.getElementById("runDiagnostics").value=="SwitchToSL"){            gSwitchToSL=true;        }        else if(document.getElementById("runDiagnostics").value=="Color"){	    lineData=[];	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "", 0.003, 0.05, 2.6]);	    clearDocument();	    lineData.forEach((element, index) => { createLine(element); } );	    replay();        }        else if(document.getElementById("runDiagnostics").value==""){            gSwitchToSL=false;            clearDocument();        }    }    function makeGIFonChange(){        if(document.getElementById("makeGIF").checked==false){             document.getElementById("numberOfFrames").disabled=true;        }        else{            document.getElementById("numberOfFrames").disabled=false;            document.getElementById("numberOfFrames").value    = gRecommendedNumberOfFrames;            document.getElementById("animationDuration").value = gRecommendedAnimationDuration;        }    }    function iniAnimationLegend(){        if(document.getElementById("makeSmallLegend").checked==false){	    d3.select("#generalLegend").remove();            return;        }				var generalLegend = svg.append("g").attr("id", "generalLegend");        	var distance = generalLegend.append("text")	    .attr("x", XlegendOffset-50)	    .attr("y", YpositionOffset-8)	    .attr("id","distancetext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial')	    .text("Distance: 0.0 km");        	var time = generalLegend.append("text")	    .attr("x", XlegendOffset-50)	    .attr("dy", YpositionOffset+6)	    .attr("id","timetext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial')	    .text("Time: 0.000 ms");        	var title = generalLegend.append("text")	    .attr("x", XlegendOffset-50)	    .attr("dy", YpositionOffset+20)	    .attr("id","titletext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var energy = generalLegend.append("text")	    .attr("x", XlegendOffset+60)	    .attr("dy", YpositionOffset+20)	    .attr("id","energytext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var cp = generalLegend.append("text")	    .attr("x", XlegendOffset-50)	    .attr("dy", YpositionOffset+34)	    .attr("id","cptext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	var type = generalLegend.append("text")	    .attr("x", XlegendOffset+60)	    .attr("dy", YpositionOffset+34)	    .attr("id","typetext")	    .attr("text-anchor", "start")	    .style('font-size','15px')	    .style('font-family','Arial');        	    }                                        d3.select("#ex0").on("click", function() {	lineData=[];	lineData.push([0.5, 0.5, 0.333333333, 7.37e-5, 2.49e-3, 90, "1", "Trimaximal", 0.003, 50, 0]);	lineData.push([0.5, 0.5, 0.333333333, 7.37e-5, 2.49e-3, 90, "-1", "Trimaximal", 0.003, 50, 0]);	clearDocument();        gRecommendedNumberOfFrames = 180;        gRecommendedAnimationDuration = 18;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex1").on("click", function() {	lineData=[];        var kk = 10;	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "3", "τ Flavour", 0.6, 1800*kk, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-3", "τ Flavour", 0.6, 1800*kk, 0]);	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex2").on("click", function() {	lineData=[];        var kk = 10;	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "2", "No CPV", 0.6, 1800*kk, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-2", "No CPV", 0.6, 1800*kk, 0]);	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex3").on("click", function() {	lineData=[];        var kk = 10;	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "Max CPV", 0.6, 1800*kk, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "Max CPV", 0.6, 1800*kk, 0]);	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex4").on("click", function() {	lineData=[];        var kk = 6;	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "1", "e Flavour", 0.0035, 10*kk, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-1", "e Flavour", 0.0035, 10*kk, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "1", "e Flavour", 0.0035, 10*kk, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "e Flavour", 0.0035, 10*kk, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex5").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "2", "T2K Vacuum", 0.6, 295, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-2", "T2K Vacuum", 0.6, 295, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "T2K Vacuum", 0.6, 295, 0]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "T2K Vacuum", 0.6, 295, 0]);	clearDocument();        gRecommendedNumberOfFrames = 20;        gRecommendedAnimationDuration = 2;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex6").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "2", "T2K Crust", 0.6, 295, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-2", "T2K Crust", 0.6, 295, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "T2K Crust", 0.6, 295, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "T2K Crust", 0.6, 295, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 20;        gRecommendedAnimationDuration = 2;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex7").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "2", "DUNE CPV", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-2", "DUNE CPV", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "DUNE CPV", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "DUNE CPV", 2.4, 1284.9, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 20;        gRecommendedAnimationDuration = 2;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex8").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "DUNE Eν", 0.8, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "DUNE Eν", 0.8, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "DUNE Eν", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "DUNE Eν", 2.4, 1284.9, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 30;        gRecommendedAnimationDuration = 3;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex9").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "2", "DUNE MH I", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-2", "DUNE MH I", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 0, "2", "DUNE MH I", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 0, "-2", "DUNE MH I", 2.4, 1284.9, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 20;        gRecommendedAnimationDuration = 2;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex10").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "2", "DUNE MH II", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-2", "DUNE MH II", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 270, "2", "DUNE MH II", 2.4, 1284.9, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 270, "-2", "DUNE MH II", 2.4, 1284.9, 2.6]);	clearDocument();        gRecommendedNumberOfFrames = 20;        gRecommendedAnimationDuration = 2;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex11").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 0, "-1", "JUNO MH I", 0.003, 53, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 0, "-1", "JUNO MH I", 0.003, 53, 2.6]);        	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex12").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "JUNO MH II", 0.003, 53, 2.6]);	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, -2.49e-3, 270, "-1", "JUNO MH II", 0.003, 53, 2.6]);        	clearDocument();        gRecommendedNumberOfFrames = 120;        gRecommendedAnimationDuration = 12;	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#ex13").on("click", function() {	lineData=[];	lineData.push([0.297, 0.425, 0.0215, 7.37e-5, 2.49e-3, 270, "-1", "Kamland", 0.0036, 220, 2.6]);                	clearDocument();	lineData.forEach((element, index) => { createLine(element); } );	replay();    });        d3.select("#reset").on("click", clearDocument);        d3.select("#replay").on("click", replay);        d3.select("#makeSmallLegend").on("change", iniAnimationLegend);        d3.select("#makeGIF").on("change", makeGIFonChange);        d3.select("#runDiagnostics").on("change", runDiagnosticsonChange);    d3.select("#start").on("click", function() {	    	if (  document.getElementById("theta12").value<0 ||    	      document.getElementById("theta12").value>1 ||    	      document.getElementById("theta23").value<0 ||    	      document.getElementById("theta23").value>1 ||    	      document.getElementById("theta13").value<0 ||    	      document.getElementById("theta13").value>1 ||    	      document.getElementById("energy").value<0  ||    	      document.getElementById("distance").value <0 ||    	      document.getElementById("theta12").value == "" ||    	      document.getElementById("theta23").value == "" ||    	      document.getElementById("theta13").value == "" ||    	      document.getElementById("dm^2_21").value == "" ||    	      document.getElementById("dm^2_32").value == "" ||    	      document.getElementById("cp").value == "" ||    	      document.getElementById("neutrino").value == ""||    	      document.getElementById("energy").value == "" ||    	      document.getElementById("distance").value == "" ||    	      document.getElementById("density").value == "") {                	    alert("Error:Please enter appropriate values!");    	    return;        }                lineData=[];        lineData.push([            Number(document.getElementById("theta12").value),             Number(document.getElementById("theta23").value),             Number(document.getElementById("theta13").value),            Number(document.getElementById("dm^2_21").value),             Number(document.getElementById("dm^2_32").value),            Number(document.getElementById("cp").value),            document.getElementById("neutrino").value,            document.getElementById("title").value,             document.getElementById("energy").value,                      document.getElementById("distance").value,            Number(document.getElementById("density").value)        ]);        lineData.forEach((element, index) => { createLine(element); } );        replay();    });            d3.select("#renderGIF").on("click", function(){ 	var len=frames.length-1;        myAlert(frames.length+" @ renderGIF "+5000);        if(frames.length==0){            alert("frames length = 0");            alert(frames.length);            return;        }		document.getElementById("renderGIF").disabled=true;		var loading=document.createElement("img");	loading.setAttribute("src", "Loading.svg");	loading.setAttribute("id", "previewGIF");	document.getElementById("preview").appendChild(loading);		var gif = new GIF({	    width: 730,	    height: 650,	    quality: 1,	    repeat: -1 	});         	function createGIF(iframe)	{	            document.getElementById("numberOfGeneratedFrames").value=iframe+1;	    	    var img = document.createElement("img"); 	    img.setAttribute("src", "data:image/svg+xml;charset=utf8," +   encodeURIComponent(frames[iframe]));	    	    img.onload = function() {                		                gif.addFrame(img, {delay: getDelay()});                		if(iframe==len)		{		    gif.render();		}else{		    createGIF(iframe+1);		}                	    };	}        	createGIF(0);	        	gif.on('finished', function(blob) {	    	    document.getElementById("saveGIF").disabled=false;            	    gifdata=URL.createObjectURL(blob);	    document.getElementById("previewGIF").setAttribute("src", gifdata);	    document.getElementById("previewGIF").setAttribute("width", 180);	    document.getElementById("previewGIF").setAttribute("height", 150);	    var aa = document.createElement("a");	    aa.download = currentName+".gif";	    aa.href = gifdata;	    document.body.appendChild(aa);	    aa.id="downloadGIF";            	});            });                    var width = 730;     var height = 677;             var margin = {top: 25*(13-6*Math.sqrt(3)), right: 50, bottom: 25*(13-6*Math.sqrt(3)),left: 50},     innerwidth = width - margin.left - margin.right,    innerheight = height - margin.top - margin.bottom ;        var svg = d3.select("#Animationdiv")        .append("svg")        .attr("width", width)        .attr("height", height)        .attr("id", "svg")        .attr("xmlns", "https://www.w3.org/2000/svg")        .append("g")        .attr("transform", "translate(" + 50 + "," + 20 + ")");            var x_scale = d3.scale.linear()        .range([0, innerwidth])        .domain([-0.70711, 0.70711]);        var y_scale = d3.scale.linear()        .range([innerheight, 0])        .domain([YdomainOffset+0, YdomainOffset+1.22475]);        svg.append("rect")        .attr("width", "100%")        .attr("height", "100%")        .attr("x", -50)        .attr("y", -20)        .attr("fill", "white");        svg.append("text")        .attr('x', XpositionOffset+630)         .attr('y', YpositionOffset+560)         .attr('width', 50)        .attr('height', 25)         .style("font-family", "Times New Roman")        .style("font-size", "35px")        .text("\u03BD")         .append("tspan")        .style("font-size", "20px")        .attr("dy", "6px")        .text("\u03C4");            svg.append("text")        .attr('x', XpositionOffset-40)         .attr('y', YpositionOffset+560)         .attr('width', 50)        .attr('height', 25)         .style("font-family", "Times New Roman")        .style("font-size", "35px")        .text("\u03BD")         .append("tspan")        .style("font-size", "20px")        .attr("dy", "6px")        .text("\u03BC");            svg.append("text")        .attr('x', XpositionOffset+295)         .attr('y', YpositionOffset-10)         .attr('width', 50)        .attr('height', 25)         .style("font-family", "Times New Roman")        .style("font-size", "35px")        .text("\u03BD")         .append("tspan")        .style("font-size", "20px")        .attr("dy", "6px")        .text("e");        var x_axis = d3.svg.axis()        .scale(x_scale)        .orient("bottom") ;        var y_axis = d3.svg.axis()        .scale(y_scale)        .orient("left") ;        var trianglePoints = x_scale(-Math.sqrt(2)/2) + ' ' + y_scale(0) + ', ' + x_scale(Math.sqrt(2)/2) + ' ' + y_scale(0) + ', ' + x_scale(0) + ' ' + y_scale(Math.sqrt(1.5)) + ' ' + x_scale(0) + ', ' + y_scale(Math.sqrt(1.5)) + ' ' + x_scale(-Math.sqrt(2)/2) + ' ' + y_scale(0);        svg.append('polyline')        .attr('points', trianglePoints)        .attr('fill','none')        .style('stroke', 'black')        .style('stroke-width','2px');        svg.append("g")        .attr("class", "x axis")        .attr("transform", "translate(0," + innerheight + ")");            svg.append("g")        .attr("class", "y axis");                var colSize = 10;    var color = d3.scale.category10();    var gColorCounter=0;     var gLineCounter=-1;        /*svg.append("text")      .attr("x", 30)      .attr("y", 10)      .attr("text-anchor", "middle")      .style('font-size','20px')      .style('font-family','Arial')      .html("Time (\u03BCs):");            svg.append("text")      .attr("x", 230)      .attr("y", -5)      .attr("text-anchor", "middle")      .style('font-size','16px')      .html("\u03BD<tspan baseline-shift ='sub'>e</tspan>");    */        var logo = svg.append("text")        .attr('x', XpositionOffset+440)        .attr('y', YpositionOffset+30)        .style('font-size','50px')        .style('font-style','italic')        .style('fill', 'grey')        .style('font-weight','bold')        .style('font-family','Arial, Helvetica, sans-serif')        .text("VISOSim");    var ver = svg.append("text")        .attr('x', XpositionOffset+582)        .attr('y', YpositionOffset+55)        .style('font-size','25px')        .style('font-style','italic')        .style('fill', 'grey')        .style('font-weight','bold')        .style('font-family','Arial, Helvetica, sans-serif')        .text("v0.2.4");        var svglegend = d3.select("#Legenddiv").append("svg").attr("id","svg2").style("width", "730px");    document.getElementById('Legenddiv').style.height = "0px";    clicks = 0;        iniAnimationLegend();}